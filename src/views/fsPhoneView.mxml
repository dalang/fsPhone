<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import events.*;
			
			import model.*;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			
			public var netConnection:NetConnection = null;
			private var incomingNetStream:NetStream = null;
			private var outgoingNetStream:NetStream = null;
			private var publishName:String = null;
			private var mic:Microphone = null;
			//private var isConnected:Boolean = false;
			private var isRinging:Boolean = false;
			private var isDialing:Boolean = false;
			private var ringSound:Sound = null;
			private var dialSound:Sound = null;
			private var outgoingSound:Sound = null;
			private var errorSound:Sound = null;
			private var ringChannel:SoundChannel = null;
			private var dialChannel:SoundChannel = null;
			private var dtmfChannel:SoundChannel = null;
			
			[Embed(source = "assets/ringing.mp3")]
			private var ringingClass:Class;
			
			[Embed(source = "assets/dialing.mp3")]
			private var dialingClass:Class;
			
			[Embed(source = "assets/gray.png")]
			public const gray:Class;
			
			[Embed(source = "assets/blue.png")]
			public const blue:Class;
			
			[Embed(source = "assets/yellow.png")]
			public const yellow:Class;
			
			
			[Embed(source = "assets/green.png")]
			public const green:Class;
			
			[Embed(source = "assets/red.png")]
			public const red:Class;
			
			[Bindable]
			public var missedCalls:ArrayCollection;
			
			[Bindable]
			public var receivedCalls:ArrayCollection;
			
			[Bindable]
			public var dialedCalls:ArrayCollection;
			
			[Bindable]
			public var dialBuffer:DialBuffer = new DialBuffer();
			
			private var incomingCallObj:Object;
			private var dialedCallObj:Object;
			private var app:dialView;
			private var ringingbox:ringingBox;

			
			private function init():void
			{
				//				this.holdButton.enabled = false;
				//				
				//				//				groupItem = new ArrayCollection();
				//				timer = new Timer(3000, 0);
				//				timer.addEventListener(TimerEvent.TIMER, timerHandler);
				freshInstance();
				ringSound = new ringingClass();
				dialSound = new dialingClass();
				//				outgoingSound = new outgoingClass();
				//				errorSound = new errorClass();
				initMicrophone();
				missedCalls = new ArrayCollection();
				receivedCalls = new ArrayCollection();
				dialedCalls = new ArrayCollection();
				
				ringingbox = new ringingBox();
				ringingbox.addEventListener('answer call', rboxAnswerHandler);
				ringingbox.addEventListener('reject call', rboxRejectHandler);
				FlexGlobals.topLevelApplication.addEventListener(IndicatorEvent.STATUS, indicatorHandler);
				FlexGlobals.topLevelApplication.dispatchEvent(new IndicatorEvent(IndicatorEvent.STATUS, IndicatorEvent.IDLE));
			}
			
			private function indicatorHandler(event:IndicatorEvent):void
			{
				var message:String = event.message;
				
				switch (message)
				{
					case IndicatorEvent.IDLE:
						indicator.source = green;
						break;
					case IndicatorEvent.CALLING:
						indicator.source = red;
						break;
					case IndicatorEvent.INCOMMING:
						indicator.source = yellow;
						break;
					case IndicatorEvent.DISCONNECTED:
						indicator.source = gray;
						break;
					default:
						break;
				}
				
			}
			
			private function rboxAnswerHandler(event:Event):void
			{
				this.enabled = true;
				this.alpha = 1;
				PopUpManager.removePopUp(ringingbox);	
				doAccept();
			}
			
			private function rboxRejectHandler(event:Event):void
			{
				this.enabled = true;
				this.alpha = 1;
				PopUpManager.removePopUp(ringingbox);	
				doHangUp();
			}
			
			public function freshInstance():void
			{
				app = dialV.activeView as dialView;
			}
			
			public function initMicrophone():void
			{
				mic = getMicrophone();
				
				if (mic == null)
				{
					trace("No available microphone");
				}
				else
				{
					mic.addEventListener(ActivityEvent.ACTIVITY, micActivityHandler);
					mic.addEventListener(StatusEvent.STATUS, micStatusHandler);
					mic.codec = SoundCodec.SPEEX;
					mic.setUseEchoSuppression(true);
					mic.setLoopBack(false);
					mic.setSilenceLevel(0, 20000);
					mic.framesPerPacket = 1;
					mic.gain = 55;
					mic.rate = 16;
					
				}
			}
			
			private function getMicrophone():Microphone
			{
				var mic:Microphone = Microphone.getMicrophone();
				var options:MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
				options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
				options.nonLinearProcessing = true;
				if (null != mic)
					mic.enhancedOptions = options;
				
				return mic;
			}
			
			private function micActivityHandler(event:ActivityEvent):void
			{
			}
			
			private function micStatusHandler(event:StatusEvent):void
			{
				switch (event.code)
				{
					case "Microphone.Muted":
						break;
					case "Microphone.Unmuted":
						break;
					default:
						trace("unknown micStatusHandler event: " + event);
				}
			}
			
			//			private function toggleMute():void
			//			{
			//				if (isConnected)
			//				{
			//					if (!muted)
			//					{
			//						if (outgoingNetStream != null)
			//						{
			//							outgoingNetStream.close();
			//							outgoingNetStream = null;
			//							micIcon.source = micMute;
			//							muted = true;
			//						}
			//					}
			//					else
			//					{
			//						outgoingNetStream = new NetStream(getNetConnection());
			//						outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
			//						outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
			//						outgoingNetStream.attachAudio(mic);
			//						outgoingNetStream.bufferTime = 0;
			//						outgoingNetStream.publish(publishName, "live");
			//						var custom_obj:Object = new Object();
			//						custom_obj.onPlayStatus = playStatus;
			//						outgoingNetStream.client = custom_obj;
			//						micIcon.source = micActive;
			//						muted = false;
			//					}
			//				}
			//			}
			
			private function getNetConnection():NetConnection
			{
				return netConnection;
			}
			
			private function setNetConnection(netConnection:NetConnection):void
			{
				this.netConnection = netConnection;
			}
			
			private function getPublishName():String
			{
				return publishName;
			}
			
			private function setPublishName(publishName:String):void
			{
				this.publishName = publishName;
			}
			
			public function callConnected(netConnection:NetConnection, playName:String, publishName:String):void
			{
				dialBuffer.isConnected = true;
				
				setNetConnection(netConnection);
				setPublishName(publishName);
				incomingNetStream = new NetStream(netConnection);
				//incomingNetStream.bufferTime = 0;
				incomingNetStream.bufferTime = 0.2;
				incomingNetStream.receiveAudio(true);
				incomingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				incomingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				
				
				outgoingNetStream = new NetStream(netConnection);
				//outgoingNetStream.bufferTime = 0;
				outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				outgoingNetStream.attachAudio(mic);
				
				var custom_obj:Object = new Object();
				custom_obj.onPlayStatus = playStatus;
				incomingNetStream.client = custom_obj;
				outgoingNetStream.client = custom_obj;
				
				incomingNetStream.play(playName);
				outgoingNetStream.publish(publishName, "live");
				
				app.setBtn('end');
				
				app.volGroup.visible = true;
				app.micGroup.visible = true;
				//				
				//				pickupButton.visible = false;
				//				dialButton.enabled = false;
				//				
				//				if (isConference)
				//				{
				//					transferButton.visible = false;
				//					holdButton.visible = false;
				//				}
				//				else
				//				{
				//					transferButton.visible = true;
				//				}
				//				
				//				indicatorIcon.source = green;
				//				startTimer();
				
				if (isDialing)
				{
					dialChannel.stop();
					isDialing = false;
				}
				
			}
			
			public function callDisconnected(event:CallDisconnectedEvent):void
			{
				if (incomingNetStream != null)
				{
					incomingNetStream.play(false);
				}
				if (outgoingNetStream != null)
				{
					outgoingNetStream.attachAudio(null);
					outgoingNetStream.close();
				}
				
				dialBuffer.isConnected = false;
				//				if (isConference)
				//				{
				//					
				//					if (vbox2.visible)
				//					{
				//						toggleConferenceList();
				//					}
				//					
				//					if (conferences.length > 0)
				//						conferences.removeItemAt(conferences.length - 1);
				//					isConference = false;
				//				}
				//				dialButton.enabled = true;
				//				clearButton.enabled = false;
				//				transferButton.visible = false;
				//				holdButton.visible = false;
				//				pickupButton.visible = false;
				//				curCall = '';
				//				
				app.volGroup.visible = false;
				app.micGroup.visible = false;
				if (event.message != "onUaCallFailed")
				{
					//					statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtHangup');
				}
				else
				{
					//					statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtCallfailed');
				}
				//				indicatorIcon.source = gray;
				//				stopTimer();
				
				if (isRinging)
				{
					ringChannel.stop();
					isRinging = false;
				}
				//				if (muted)
				//				{
				//					micIcon.source = micActive;
				//				}
				if (isDialing)
				{
					dialChannel.stop();
					isDialing = false;
				}
				
				if (false == this.enabled)
				{
					this.enabled = true;
					this.alpha = 1;
					PopUpManager.removePopUp(ringingbox);	
				}
			}
			
			public function incomingCall(event:IncomingCallEvent):void
			{
				//				statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtIncoming') + (event.name == "" ? event.number : event.name);
				//				pickupButton.visible = true;
				//				dialButton.enabled = false;
				//				clearButton.enabled = true;
				//				indicatorIcon.source = red;
				if (!isRinging)
				{
					ringChannel = ringSound.play();
					isRinging = true;
				}
				//app.setBtn('answer');
				popRingBox();
				app.setDialnumTxt(event.number);
				incomingCallObj = new Object();
				incomingCallObj.label = event.name;
				incomingCallObj.data = event.number;
				incomingCallObj.uuid = event.uuid;
				incomingCallObj.time = new Date().toString();
			}
			
			private function netStatus(evt:NetStatusEvent):void
			{
				switch (evt.info.code)
				{
					
					case "NetStream.Play.StreamNotFound":
						break;
					
					case "NetStream.Play.Failed":
						parentApplication.rtmp.doStreamStatus("failed");
						break;
					
					case "NetStream.Play.Start":
						parentApplication.rtmp.doStreamStatus("start");
						break;
					
					case "NetStream.Play.Stop":
						parentApplication.rtmp.doStreamStatus("stop");
						break;
					
					case "NetStream.Buffer.Full":
						break;
					
					default:
						
				}
			}
			
			private function asyncErrorHandler(event:AsyncErrorEvent):void
			{
				trace("AsyncErrorEvent: " + event);
			}
			
			private function playStatus(event:Object):void
			{
			}
			
			public function doCall(dialNum:String):void
			{
				//var dialNum:String = FlexGlobals.topLevelApplication.fsPhoneView.dialNumTxt.text;
				parentApplication.rtmp.doCall(dialNum);
				// HARDCODE here!!! Check if the connection is a conference call
				//				if (int(dialnumTxt.text) >= 3000 && int(dialnumTxt.text) < 4000)
				//					isConference = true;
				//				
				//				dialButton.enabled = false;
				//				clearButton.enabled = true;
				//				indicatorIcon.source = green;
				//				statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtCalling');
				if (!isDialing)
				{
					dialChannel = dialSound.play(0, 10);
					isDialing = true;
				}
				//				if (dialedCalls.length >= 10)
				//				{
				//					dialedCalls.pop();
				//				}
								dialedCallObj = new Object();
								//dialedCallObj.data = dialNum;
								dialedCallObj.label = dialNum;
								dialedCallObj.time = new Date().toString();
								dialedCalls.addItemAt(dialedCallObj, 0);
				//				curCall = dialedCallObj.label;
			}
			
			public function doHangUp():void {
				parentApplication.rtmp.doHangUp();
				
				app.volGroup.visible = false;
				app.micGroup.visible = false;
				app.setBtn('call');
				
				if (isDialing)
				{
					dialChannel.stop();
					isDialing = false;
				}
				if (isRinging)
				{
					ringChannel.stop();
					isRinging = false;
				}
			}
			
			public function missedCall():void
			{
				dialBuffer.isConnected = false;
//				dialButton.enabled = true;
//				clearButton.enabled = false;
//				transferButton.visible = false;
//				holdButton.visible = false;
//				pickupButton.visible = false;
//				indicatorIcon.source = gray;
				if (isRinging)
				{
					ringChannel.stop();
					isRinging = false;
				}
				if (missedCalls.length >= 10)
				{
					missedCalls.removeItemAt(missedCalls.length);
				}
				missedCalls.addItemAt(incomingCallObj, 0);
//				missedCallIndicator.source = redFlag;
			}
			
			public function doAccept():void
			{
				parentApplication.rtmp.doAccept(incomingCallObj.uuid);
				//				curCall = incomingCallObj.name;
				
				if (isRinging)
				{
					ringChannel.stop();
					isRinging = false;
				}
				
				if (receivedCalls.length >= 10)
				{
					receivedCalls.removeItemAt(receivedCalls.length);
				}
				receivedCalls.addItemAt(incomingCallObj,0);
				
				//				dialButton.enabled = false;
				
			}
			
			public function changeVolume(event:Event):void
			{
				var st:SoundTransform = incomingNetStream.soundTransform;
				
				st.volume = (app.volSlider.value) * .01;
				incomingNetStream.soundTransform = st;
			}
			
			public function changeMicVolume(event:Event):void
			{
				mic.gain = (app.micSlider.value)
			}
			
			private function popRingBox():void
			{
				PopUpManager.addPopUp(ringingbox, this, true);
				PopUpManager.centerPopUp(ringingbox);
				this.enabled = false;
				this.alpha = .5;
			}
		]]>
	</fx:Script>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
	
		s|ActionBar #titleDisplay
		{
			color: #FFFDFB;
			fontSize: 40;
			fontFamily: "Comic Sans MS";
		}
		
		s|TabbedViewNavigator #tabBar
		{
			chromeColor: #008CD4;
			color: #CCCCCC;
			fontFamily: "Comic Sans MS";
			iconPlacement:left;
			textDecoration:underline;
		}
	</fx:Style>
	<s:viewMenuItems>
		<s:ViewMenuItem label="Exit" click="NativeApplication.nativeApplication.exit();"/>
		<s:ViewMenuItem label="Mail to author" click="navigateToURL(new URLRequest('mailto:dongguoxign@crscy.com.cn'));"/>
		<s:ViewMenuItem label="About" click="(new AboutMsg()).open(this, false);"/>
	</s:viewMenuItems>
	
	<s:navigationContent>
		<s:Image id='indicator' source="@Embed('assets/gray.png')" height="32" width="32"/>
	</s:navigationContent>
	
	<s:titleContent>
		<s:Label id="username" text="{FlexGlobals.topLevelApplication.username}" width="100%" textAlign="center" color="#FFFBFD" fontSize="30"/>
	</s:titleContent>
	
	<s:actionContent>
		<s:Label height="32" width="32"/>
	</s:actionContent>
	
	<s:TabbedViewNavigator width="100%" height="100%">
		<s:ViewNavigator id='dialV' label="Dial" width="100%" height="100%" 
						 firstView="views.dialView" firstViewData="{dialBuffer}" icon="@Embed('assets/dialer.png')"/>
		<s:ViewNavigator label="History" width="100%" height="100%" 						 
						 firstView="views.historyView" icon="@Embed('assets/history.png')"/>
		<s:ViewNavigator label="Logs" width="100%" height="100%" 						 
						 firstView="views.logsView" icon="@Embed('assets/log.png')"/>
	</s:TabbedViewNavigator>
</s:View>
