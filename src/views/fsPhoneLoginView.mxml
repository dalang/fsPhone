<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:supportClasses="spark.skins.mobile.supportClasses.*" title="fsPhone" viewActivate="init(event)" menuKeyPressed="menuKeyPressedHandler(event)" backgroundColor="#DDDDDD">
	<s:layout>
		<s:BasicLayout>
			
		</s:BasicLayout>
	</s:layout>
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import events.IndicatorEvent;
			import events.RtmpMessageEvent;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.ViewNavigatorEvent;


			private var progress:Progress = new Progress();
			private var timer:Timer;

						
			protected function init(event:ViewNavigatorEvent):void {
				FlexGlobals.topLevelApplication.addEventListener(RtmpMessageEvent.MESSAGE, rtmpMessageEventHandler);
			}

			protected function menuKeyPressedHandler(event:FlexEvent):void {
				//event.preventDefault();
			}
			
			private function onCancel(event:MouseEvent):void {
				
			}
			
			private function onLogin(event:MouseEvent):void {
				this.parentApplication.login(sipAccountTxt.text, sipPswTxt.text, sipRealmTxt.text, sipServerTxt.text);
				this.popIndicator();
				//navigator.pushView(views.fsPhoneView);
			}

			private function popIndicator():void
			{
				PopUpManager.addPopUp(progress, this, true);
				PopUpManager.centerPopUp(progress);
				this.enabled = false;
				this.alpha = .5;
				
				timer = new Timer(3000,1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE,timerComplete);
				timer.start();
			}
			
			private function rtmpMessageEventHandler(event:RtmpMessageEvent):void {
				var msgType:String = event.msgType;
				var message:String = event.message;
				
				switch (msgType)
				{
					case RtmpMessageEvent.NETSTAUS:
						if (message == 'Failed to connect to FreeSWITCH')
						{
						}
						else if (message == 'Connection success')
						{
							navigator.pushView(views.fsPhoneView);
							timer.dispatchEvent(new TimerEvent(TimerEvent.TIMER_COMPLETE));
							dispatchEvent(new RtmpMessageEvent(RtmpMessageEvent.MESSAGE, RtmpMessageEvent.CALLSTATE, 'HupCall'));
						}
						else
						{
							//	loginCanvas.alertMsgTxt.text = message;
							//	phoneCanvas.statusTxt.text = message;
						}	
						break;
					
					default:
				}
			}
			
			private function timerComplete(event:TimerEvent):void {
				removeIndicator();
			}
			
			private function removeIndicator():void {
				this.enabled = true;
				this.alpha = 1;
				PopUpManager.removePopUp(progress);				
			}

		]]>
	</fx:Script>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

		s|ActionBar #titleDisplay
		{
			color: #FFFDFB;
			fontSize: 40;
			fontFamily: "Comic Sans MS";
		}
		
		s|TabbedViewNavigator #tabBar
		{
			chromeColor: #008CD4;
			color: #CCCCCC;
			iconPlacement:left;
			textDecoration:underline;
		}
	</fx:Style>
	<s:viewMenuItems>
		<s:ViewMenuItem label="Exit" click="NativeApplication.nativeApplication.exit();"/>
		<s:ViewMenuItem label="Mail to author" click="navigateToURL(new URLRequest('mailto:dongguoxign@crscy.com.cn'));"/>
		<s:ViewMenuItem label="About" click="(new AboutMsg()).open(this, false);"/>
	</s:viewMenuItems>
	
	<s:Group x="21" y="40" width="280" height="284">
		<s:Label x="26" y="10" text="SIP Account"/>
		<s:TextInput id="sipAccountTxt" x="25" y="30" width="230" tabEnabled="true" tabIndex="0"
					 text="1101"/>
		<s:Label x="26" y="70" text="Password"/>
		<s:TextInput id="sipPswTxt" x="25" y="90" width="230" displayAsPassword="true"
					 tabEnabled="true" tabIndex="1" text="1234"/>
		<s:Label x="26" y="149" text="SIP Realm" tabEnabled="false"/>
		<s:TextInput id="sipRealmTxt" x="25" y="169" width="230" tabEnabled="true" tabIndex="2"
					 text="192.168.1.145"/>
		<s:Label x="26" y="210" text="SIP Server"/>
		<s:TextInput id="sipServerTxt" x="25" y="230" width="230" tabEnabled="true" tabIndex="3"
					 text="192.168.1.145"/>
		<s:Spacer x="0" y="134" width="100%" height="2"/>
	<s:HGroup id="hgroup" x="0" y="283" width="280" height="45" gap="20" horizontalAlign="center"
			  verticalAlign="bottom">
		<s:Button width="35%" label="Register" click="onCancel(event)"  chromeColor="#37659D" color="#FCFFFF"/>
		<s:Button width="35%" label="Login" click="onLogin(event)" chromeColor="#F6530A" color="#FCFFFF"/>
	</s:HGroup>
	</s:Group>
	<s:Label x="21" y="{this.height - 20}" width="280" fontSize="12"
			 text="Copyright Â© iPeers All Rights Reserved." textAlign="center"/>
</s:View>
